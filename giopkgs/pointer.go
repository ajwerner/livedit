// this file was generated by gomacro command: import _i "gioui.org/io/pointer"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package giopkgs

import (
	r "reflect"
	"github.com/cosmos72/gomacro/imports"
	pointer "gioui.org/io/pointer"
)

// reflection: allow interpreted code to import "gioui.org/io/pointer"
func init() {
	imports.Packages["gioui.org/io/pointer"] = imports.Package{
	Name: "pointer",
	Binds: map[string]r.Value{
		"ButtonLeft":	r.ValueOf(pointer.ButtonLeft),
		"ButtonMiddle":	r.ValueOf(pointer.ButtonMiddle),
		"ButtonRight":	r.ValueOf(pointer.ButtonRight),
		"Cancel":	r.ValueOf(pointer.Cancel),
		"CursorColResize":	r.ValueOf(pointer.CursorColResize),
		"CursorCrossHair":	r.ValueOf(pointer.CursorCrossHair),
		"CursorDefault":	r.ValueOf(pointer.CursorDefault),
		"CursorNone":	r.ValueOf(pointer.CursorNone),
		"CursorPointer":	r.ValueOf(pointer.CursorPointer),
		"CursorRowResize":	r.ValueOf(pointer.CursorRowResize),
		"CursorText":	r.ValueOf(pointer.CursorText),
		"Drag":	r.ValueOf(pointer.Drag),
		"Ellipse":	r.ValueOf(pointer.Ellipse),
		"Enter":	r.ValueOf(pointer.Enter),
		"Foremost":	r.ValueOf(pointer.Foremost),
		"Grabbed":	r.ValueOf(pointer.Grabbed),
		"Leave":	r.ValueOf(pointer.Leave),
		"Mouse":	r.ValueOf(pointer.Mouse),
		"Move":	r.ValueOf(pointer.Move),
		"Press":	r.ValueOf(pointer.Press),
		"Rect":	r.ValueOf(pointer.Rect),
		"Release":	r.ValueOf(pointer.Release),
		"Scroll":	r.ValueOf(pointer.Scroll),
		"Shared":	r.ValueOf(pointer.Shared),
		"Touch":	r.ValueOf(pointer.Touch),
	}, Types: map[string]r.Type{
		"AreaOp":	r.TypeOf((*pointer.AreaOp)(nil)).Elem(),
		"Buttons":	r.TypeOf((*pointer.Buttons)(nil)).Elem(),
		"CursorName":	r.TypeOf((*pointer.CursorName)(nil)).Elem(),
		"CursorNameOp":	r.TypeOf((*pointer.CursorNameOp)(nil)).Elem(),
		"Event":	r.TypeOf((*pointer.Event)(nil)).Elem(),
		"ID":	r.TypeOf((*pointer.ID)(nil)).Elem(),
		"InputOp":	r.TypeOf((*pointer.InputOp)(nil)).Elem(),
		"PassOp":	r.TypeOf((*pointer.PassOp)(nil)).Elem(),
		"Priority":	r.TypeOf((*pointer.Priority)(nil)).Elem(),
		"Source":	r.TypeOf((*pointer.Source)(nil)).Elem(),
		"Type":	r.TypeOf((*pointer.Type)(nil)).Elem(),
	}, 
	}
}
