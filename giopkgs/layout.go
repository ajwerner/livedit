// this file was generated by gomacro command: import _i "gioui.org/layout"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package giopkgs

import (
	r "reflect"
	"github.com/cosmos72/gomacro/imports"
	layout "gioui.org/layout"
)

// reflection: allow interpreted code to import "gioui.org/layout"
func init() {
	imports.Packages["gioui.org/layout"] = imports.Package{
	Name: "layout",
	Binds: map[string]r.Value{
		"Baseline":	r.ValueOf(layout.Baseline),
		"Center":	r.ValueOf(layout.Center),
		"E":	r.ValueOf(layout.E),
		"End":	r.ValueOf(layout.End),
		"Exact":	r.ValueOf(layout.Exact),
		"Expanded":	r.ValueOf(layout.Expanded),
		"FPt":	r.ValueOf(layout.FPt),
		"FRect":	r.ValueOf(layout.FRect),
		"Flexed":	r.ValueOf(layout.Flexed),
		"Horizontal":	r.ValueOf(layout.Horizontal),
		"Middle":	r.ValueOf(layout.Middle),
		"N":	r.ValueOf(layout.N),
		"NE":	r.ValueOf(layout.NE),
		"NW":	r.ValueOf(layout.NW),
		"NewContext":	r.ValueOf(layout.NewContext),
		"Rigid":	r.ValueOf(layout.Rigid),
		"S":	r.ValueOf(layout.S),
		"SE":	r.ValueOf(layout.SE),
		"SW":	r.ValueOf(layout.SW),
		"SpaceAround":	r.ValueOf(layout.SpaceAround),
		"SpaceBetween":	r.ValueOf(layout.SpaceBetween),
		"SpaceEnd":	r.ValueOf(layout.SpaceEnd),
		"SpaceEvenly":	r.ValueOf(layout.SpaceEvenly),
		"SpaceSides":	r.ValueOf(layout.SpaceSides),
		"SpaceStart":	r.ValueOf(layout.SpaceStart),
		"Stacked":	r.ValueOf(layout.Stacked),
		"Start":	r.ValueOf(layout.Start),
		"UniformInset":	r.ValueOf(layout.UniformInset),
		"Vertical":	r.ValueOf(layout.Vertical),
		"W":	r.ValueOf(layout.W),
	}, Types: map[string]r.Type{
		"Alignment":	r.TypeOf((*layout.Alignment)(nil)).Elem(),
		"Axis":	r.TypeOf((*layout.Axis)(nil)).Elem(),
		"Constraints":	r.TypeOf((*layout.Constraints)(nil)).Elem(),
		"Context":	r.TypeOf((*layout.Context)(nil)).Elem(),
		"Dimensions":	r.TypeOf((*layout.Dimensions)(nil)).Elem(),
		"Direction":	r.TypeOf((*layout.Direction)(nil)).Elem(),
		"Flex":	r.TypeOf((*layout.Flex)(nil)).Elem(),
		"FlexChild":	r.TypeOf((*layout.FlexChild)(nil)).Elem(),
		"Inset":	r.TypeOf((*layout.Inset)(nil)).Elem(),
		"List":	r.TypeOf((*layout.List)(nil)).Elem(),
		"ListElement":	r.TypeOf((*layout.ListElement)(nil)).Elem(),
		"Position":	r.TypeOf((*layout.Position)(nil)).Elem(),
		"Spacer":	r.TypeOf((*layout.Spacer)(nil)).Elem(),
		"Spacing":	r.TypeOf((*layout.Spacing)(nil)).Elem(),
		"Stack":	r.TypeOf((*layout.Stack)(nil)).Elem(),
		"StackChild":	r.TypeOf((*layout.StackChild)(nil)).Elem(),
		"Widget":	r.TypeOf((*layout.Widget)(nil)).Elem(),
	}, Wrappers: map[string][]string{
		"Context":	[]string{"Data","Refs","Reset","Version","Write","Write1","Write2",},
	}, 
	}
}
